2013-12-18  Cary Coutant  <ccoutant@google.com>

gold/
	* configure.ac: Check for <unordered_set> and <unordered_map>.
	* config.in: Regenerate.
	* configure: Regenerate.
	* system.h: Use <unordered_set> and <unordered_map> if available.


diff --git a/gold/config.in b/gold/config.in
index 9bc216b..b2741cf 100644
--- a/gold/config.in
+++ b/gold/config.in
@@ -172,6 +172,10 @@
 /* Define to 1 if you have the `times' function. */
 #undef HAVE_TIMES
 
+#undef HAVE_UNORDERED_SET
+
+#undef HAVE_UNORDERED_MAP
+
 /* Define if std::tr1::hash<off_t> is usable */
 #undef HAVE_TR1_HASH_OFF_T
 
diff --git a/gold/configure b/gold/configure
index 9bc216b..b2741cf 100644
--- a/gold/configure
+++ b/gold/configure
@@ -7132,6 +7132,19 @@
 ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
 ac_compiler_gnu=$ac_cv_cxx_compiler_gnu
 
+for ac_header in unordered_set unordered_map
+do :
+  as_ac_Header=`$as_echo "ac_cv_header_$ac_header" | $as_tr_sh`
+ac_fn_cxx_check_header_mongrel "$LINENO" "$ac_header" "$as_ac_Header" "$ac_includes_default"
+eval as_val=\$$as_ac_Header
+   if test "x$as_val" = x""yes; then :
+  cat >>confdefs.h <<_ACEOF
+#define `$as_echo "HAVE_$ac_header" | $as_tr_cpp` 1
+_ACEOF
+
+fi
+
+done
 
 for ac_header in tr1/unordered_set tr1/unordered_map
 do :
diff --git a/gold/configure.ac b/gold/configure.ac
index 9bc216b..b2741cf 100644
--- a/gold/configure.ac
+++ b/gold/configure.ac
@@ -523,6 +523,7 @@ AC_CHECK_DECLS([basename, ffs, asprintf, vasprintf, snprintf, vsnprintf, strvers
 
 AC_LANG_PUSH(C++)
 
+AC_CHECK_HEADERS(unordered_set unordered_map)
 AC_CHECK_HEADERS(tr1/unordered_set tr1/unordered_map)
 AC_CHECK_HEADERS(ext/hash_map ext/hash_set)
 AC_CHECK_HEADERS(byteswap.h)
diff --git a/gold/system.h b/gold/system.h
index 3e6fe1d..aea3723 100644
--- a/gold/gold.h
+++ b/gold/gold.h
@@ -57,8 +57,22 @@
 
 // Figure out how to get a hash set and a hash map.
 
-#if defined(HAVE_TR1_UNORDERED_SET) && defined(HAVE_TR1_UNORDERED_MAP) \
-    && defined(HAVE_TR1_UNORDERED_MAP_REHASH)
+#if defined(HAVE_UNORDERED_SET) && defined(HAVE_UNORDERED_MAP)
+
+#include <unordered_set>
+#include <unordered_map>
+#include <string>
+
+// We need a template typedef here.
+
+#define Unordered_set std::unordered_set
+#define Unordered_map std::unordered_map
+#define Unordered_multimap std::unordered_multimap
+
+#define reserve_unordered_map(map, n) ((map)->rehash(n))
+
+#elif defined(HAVE_TR1_UNORDERED_SET) && defined(HAVE_TR1_UNORDERED_MAP) \
+      && defined(HAVE_TR1_UNORDERED_MAP_REHASH)
 
 #include <tr1/unordered_set>
 #include <tr1/unordered_map>
diff --git a/gold/stringpool.cc b/gold/stringpool.cc
index 3e6fe1d..aea3723 100644
--- a/gold/stringpool.cc
+++ b/gold/stringpool.cc
@@ -73,7 +73,7 @@
 {
   this->key_to_offset_.reserve(n);
 
-#if defined(HAVE_TR1_UNORDERED_MAP)
+#if defined(HAVE_UNORDERED_MAP) || defined(HAVE_TR1_UNORDERED_MAP)
   // rehash() implementation is broken in gcc 4.0.3's stl
   //this->string_set_.rehash(this->string_set_.size() + n);
   //return;
@@ -503,7 +503,7 @@
 void
 Stringpool_template<Stringpool_char>::print_stats(const char* name) const
 {
-#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_UNORDERED_MAP) || defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
   fprintf(stderr, _("%s: %s entries: %zu; buckets: %zu\n"),
 	  program_name, name, this->string_set_.size(),
 	  this->string_set_.bucket_count());
diff --git a/gold/symtab.cc b/gold/symtab.cc
index 3e6fe1d..aea3723 100644
--- a/gold/symtab.cc
+++ b/gold/symtab.cc
@@ -3150,7 +3150,7 @@
 void
 Symbol_table::print_stats() const
 {
-#if defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
+#if defined(HAVE_UNORDERED_MAP) || defined(HAVE_TR1_UNORDERED_MAP) || defined(HAVE_EXT_HASH_MAP)
   fprintf(stderr, _("%s: symbol table entries: %zu; buckets: %zu\n"),
 	  program_name, this->table_.size(), this->table_.bucket_count());
 #else
